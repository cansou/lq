package com.tencent.msdk.stat.common;

class h extends g {
    private static final int[] c = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    private static final int[] d = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
    private int e;
    private int f;
    private final int[] g;

    public h(int i, byte[] bArr) {
        this.a = bArr;
        this.g = (i & 8) == 0 ? c : d;
        this.e = 0;
        this.f = 0;
    }

    public boolean a(byte[] bArr, int i, int i2, boolean z) {
        int i3;
        if (this.e == 6) {
            return false;
        }
        int i4 = i2 + i;
        int i5 = this.e;
        int i6 = this.f;
        int i7 = 0;
        byte[] bArr2 = this.a;
        int[] iArr = this.g;
        int i8 = i;
        while (true) {
            if (i8 < i4) {
                if (i5 == 0) {
                    while (i8 + 4 <= i4 && (i6 = (iArr[bArr[i8] & 255] << 18) | (iArr[bArr[i8 + 1] & 255] << 12) | (iArr[bArr[i8 + 2] & 255] << 6) | iArr[bArr[i8 + 3] & 255]) >= 0) {
                        bArr2[i7 + 2] = (byte) i6;
                        bArr2[i7 + 1] = (byte) (i6 >> 8);
                        bArr2[i7] = (byte) (i6 >> 16);
                        i7 += 3;
                        i8 += 4;
                    }
                    if (i8 >= i4) {
                        i3 = i6;
                    }
                }
                int i9 = i8 + 1;
                int i10 = iArr[bArr[i8] & 255];
                switch (i5) {
                    case 0:
                        if (i10 < 0) {
                            if (i10 == -1) {
                                break;
                            } else {
                                this.e = 6;
                                return false;
                            }
                        } else {
                            i5++;
                            i6 = i10;
                            break;
                        }
                    case 1:
                        if (i10 < 0) {
                            if (i10 == -1) {
                                break;
                            } else {
                                this.e = 6;
                                return false;
                            }
                        } else {
                            i6 = (i6 << 6) | i10;
                            i5++;
                            break;
                        }
                    case 2:
                        if (i10 < 0) {
                            if (i10 != -2) {
                                if (i10 == -1) {
                                    break;
                                } else {
                                    this.e = 6;
                                    return false;
                                }
                            } else {
                                bArr2[i7] = (byte) (i6 >> 4);
                                i5 = 4;
                                i7++;
                                break;
                            }
                        } else {
                            i6 = (i6 << 6) | i10;
                            i5++;
                            break;
                        }
                    case 3:
                        if (i10 < 0) {
                            if (i10 != -2) {
                                if (i10 == -1) {
                                    break;
                                } else {
                                    this.e = 6;
                                    return false;
                                }
                            } else {
                                bArr2[i7 + 1] = (byte) (i6 >> 2);
                                bArr2[i7] = (byte) (i6 >> 10);
                                i7 += 2;
                                i5 = 5;
                                break;
                            }
                        } else {
                            i6 = (i6 << 6) | i10;
                            bArr2[i7 + 2] = (byte) i6;
                            bArr2[i7 + 1] = (byte) (i6 >> 8);
                            bArr2[i7] = (byte) (i6 >> 16);
                            i7 += 3;
                            i5 = 0;
                            break;
                        }
                    case 4:
                        if (i10 != -2) {
                            if (i10 == -1) {
                                break;
                            } else {
                                this.e = 6;
                                return false;
                            }
                        } else {
                            i5++;
                            break;
                        }
                    case 5:
                        if (i10 == -1) {
                            break;
                        } else {
                            this.e = 6;
                            return false;
                        }
                }
                i8 = i9;
            } else {
                i3 = i6;
            }
        }
        if (!z) {
            this.e = i5;
            this.f = i3;
            this.b = i7;
            return true;
        }
        switch (i5) {
            case 1:
                this.e = 6;
                return false;
            case 2:
                bArr2[i7] = (byte) (i3 >> 4);
                i7++;
                break;
            case 3:
                int i11 = i7 + 1;
                bArr2[i7] = (byte) (i3 >> 10);
                i7 = i11 + 1;
                bArr2[i11] = (byte) (i3 >> 2);
                break;
            case 4:
                this.e = 6;
                return false;
        }
        this.e = i5;
        this.b = i7;
        return true;
    }
}
